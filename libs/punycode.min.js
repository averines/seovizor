"use strict";function error(o){throw new RangeError(errors[o])}function map(o,e){const t=[];let n=o.length;for(;n--;)t[n]=e(o[n]);return t}function mapDomain(o,e){const t=o.split("@");let n="";t.length>1&&(n=t[0]+"@",o=t[1]),o=o.replace(regexSeparators,".");const r=o.split("."),i=map(r,e).join(".");return n+i}function ucs2decode(o){const e=[];let t=0;const n=o.length;for(;t<n;){const r=o.charCodeAt(t++);if(r>=55296&&r<=56319&&t<n){const n=o.charCodeAt(t++);56320==(64512&n)?e.push(((1023&r)<<10)+(1023&n)+65536):(e.push(r),t--)}else e.push(r)}return e}const maxInt=2147483647,base=36,tMin=1,tMax=26,skew=38,damp=700,initialBias=72,initialN=128,delimiter="-",regexPunycode=/^xn--/,regexNonASCII=/[^\0-\x7F]/,regexSeparators=/[\x2E\u3002\uFF0E\uFF61]/g,errors={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},baseMinusTMin=base-tMin,floor=Math.floor,stringFromCharCode=String.fromCharCode,ucs2encode=o=>String.fromCodePoint(...o),basicToDigit=function(o){return o>=48&&o<58?o-48+26:o>=65&&o<91?o-65:o>=97&&o<123?o-97:base},digitToBasic=function(o,e){return o+22+75*(o<26)-((0!=e)<<5)},adapt=function(o,e,t){let n=0;for(o=t?floor(o/damp):o>>1,o+=floor(o/e);o>baseMinusTMin*tMax>>1;n+=base)o=floor(o/baseMinusTMin);return floor(n+(baseMinusTMin+1)*o/(o+skew))},decode=function(o){const e=[],t=o.length;let n=0,r=initialN,i=initialBias,s=o.lastIndexOf(delimiter);s<0&&(s=0);for(let t=0;t<s;++t)o.charCodeAt(t)>=128&&error("not-basic"),e.push(o.charCodeAt(t));for(let a=s>0?s+1:0;a<t;){const s=n;for(let e=1,r=base;;r+=base){a>=t&&error("invalid-input");const s=basicToDigit(o.charCodeAt(a++));s>=base&&error("invalid-input"),s>floor((maxInt-n)/e)&&error("overflow"),n+=s*e;const c=r<=i?tMin:r>=i+tMax?tMax:r-i;if(s<c)break;const l=base-c;e>floor(maxInt/l)&&error("overflow"),e*=l}const c=e.length+1;i=adapt(n-s,c,0==s),floor(n/c)>maxInt-r&&error("overflow"),r+=floor(n/c),n%=c,e.splice(n++,0,r)}return String.fromCodePoint(...e)},encode=function(o){const e=[];o=ucs2decode(o);const t=o.length;let n=initialN,r=0,i=initialBias;for(const t of o)t<128&&e.push(stringFromCharCode(t));const s=e.length;let a=s;for(s&&e.push(delimiter);a<t;){let t=maxInt;for(const e of o)e>=n&&e<t&&(t=e);const c=a+1;t-n>floor((maxInt-r)/c)&&error("overflow"),r+=(t-n)*c,n=t;for(const t of o)if(t<n&&++r>maxInt&&error("overflow"),t===n){let o=r;for(let t=base;;t+=base){const n=t<=i?tMin:t>=i+tMax?tMax:t-i;if(o<n)break;const r=o-n,s=base-n;e.push(stringFromCharCode(digitToBasic(n+r%s,0))),o=floor(r/s)}e.push(stringFromCharCode(digitToBasic(o,0))),i=adapt(r,c,a===s),r=0,++a}++r,++n}return e.join("")},toUnicode=function(o){return mapDomain(o,function(o){return regexPunycode.test(o)?decode(o.slice(4).toLowerCase()):o})},toASCII=function(o){return mapDomain(o,function(o){return regexNonASCII.test(o)?"xn--"+encode(o):o})};export const punycode={version:"2.1.0",ucs2:{decode:ucs2decode,encode:ucs2encode},decode:decode,encode:encode,toASCII:toASCII,toUnicode:toUnicode};